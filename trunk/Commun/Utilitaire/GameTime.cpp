///////////////////////////////////////////////////////////////////////////////
/// @file GameTime.cpp
/// @author Michael Ferris
/// @date 2011-12-02
/// @version 1.0
///
/// @addtogroup utilitaire Utilitaire
/// @{
///////////////////////////////////////////////////////////////////////////////

#include "GameTime.h"

/////////////////////////////////////////////////////////////////////////
///
/// @fn GameTime::GameTime(void)
///
/// Constructeur qui initialise l'horloge.
///
/// @return
///
////////////////////////////////////////////////////////////////////////
GameTime::GameTime(void)
{
	begin_time_ = clock();
    pause_time_ = begin_time_;
    paused_ = true;
}

/////////////////////////////////////////////////////////////////////////
///
/// @fn GameTime::GameTime( clock_t currentTime )
///
/// Constructeur qui initialise l'horloge.
///
/// @param[in] clock_t currentTime : Le temps initial voulu.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
GameTime::GameTime( clock_t currentTime )
{
	begin_time_ = currentTime;
    pause_time_ = currentTime;
    paused_ = true;
}

/////////////////////////////////////////////////////////////////////////
///
/// @fn 	bool existe(const T& elem)
///
/// Vérifie l'existence d'un élément dans le vecteur.
///
/// @param[in] const T& elem : L'élément recherché.
///
/// @return
///
////////////////////////////////////////////////////////////////////////
GameTime::~GameTime(void)
{
}

/////////////////////////////////////////////////////////////////////////
///
/// @fn float GameTime::Elapsed_Time_ms()
///
/// Accesseur au temps écoulé.
///
/// @return Le temps écoulé en milisecondes.
///
////////////////////////////////////////////////////////////////////////
float GameTime::Elapsed_Time_ms()
{
	return Elapsed_Time_clock()/(CLOCKS_PER_SEC/1000.0f);
}

/////////////////////////////////////////////////////////////////////////
///
/// @fn clock_t GameTime::Elapsed_Time_clock()
///
/// Accesseur au temps écoulé.
///
/// @return Une horloge représentant le temps écoulé.
///
////////////////////////////////////////////////////////////////////////
clock_t GameTime::Elapsed_Time_clock()
{
	if(paused_)
		return (pause_time_ - begin_time_);
	return (clock() - begin_time_);
}

/////////////////////////////////////////////////////////////////////////
///
/// @fn float GameTime::Elapsed_Time_percent( clock_t ref )
///
/// Accesseur au temps écoulé.
///
/// @param[in] clock_t ref : Horloge de référence.
///
/// @return Le pourcentage de temps écoulé.
///
////////////////////////////////////////////////////////////////////////
float GameTime::Elapsed_Time_percent( clock_t ref )
{
	return Elapsed_Time_ms()/(float)ref;
}

/////////////////////////////////////////////////////////////////////////
///
/// @fn void GameTime::reset_Time()
///
/// Réinitialise l'horloge.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void GameTime::reset_Time()
{
	begin_time_ = clock();
    pause_time_ = clock();
}

/////////////////////////////////////////////////////////////////////////
///
/// @fn float GameTime::Elapsed_Time_sec()
///
/// Accesseur au temps écoulé.
///
/// @return Le temps écoulé en secondes.
///
////////////////////////////////////////////////////////////////////////
float GameTime::Elapsed_Time_sec()
{
	return Elapsed_Time_clock()/(float)CLOCKS_PER_SEC;
}

////////////////////////////////////////////////////////////////////////
///
/// @fn void GameTime::adjustTime( float milisec )
///
/// Ajustement de l'horloge.
///
/// @param[in] float milisec : Le nombre de milisecondes à ajouter.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void GameTime::adjustTime( float milisec )
{
	begin_time_ += (clock_t)milisec;
}

///////////////////////////////////////////////////////////////////////////
/// @}
///////////////////////////////////////////////////////////////////////////




