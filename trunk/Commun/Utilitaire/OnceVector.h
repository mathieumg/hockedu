///////////////////////////////////////////////////////////////////////////////
/// @file OnceVector.h
/// @author Michael Ferris
/// @date 2011-05-14
/// @version 1.0
///
/// @addtogroup utilitaire Utilitaire
/// @{
///////////////////////////////////////////////////////////////////////////////
#pragma once
#include <vector>
#include <algorithm>

using namespace std;


///////////////////////////////////////////////////////////////////////////
/// @class OnceVector
/// @brief Vecteur qui ne peut contenir deux fois le même élément.
///
/// @author Michael Ferris
/// @date 2011-05-14
///////////////////////////////////////////////////////////////////////////
template<typename T>
class OnceVector
{
public:
	/// Constructeur par défaut
	OnceVector(int size=0):vec(0){};
	/// Desructeur vide
	~OnceVector(){};

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	bool existe(const T& elem)
	///
	/// Vérifie l'existence d'un élément dans le vecteur.
	///
	/// @param[in] const T& elem : L'élément recherché.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	bool existe(const T& elem)
	{
		return find(vec.begin(),vec.end(),elem) != vec.end();
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	void push_back(const T& elem)
	///
	/// Ajouter un élément dans le vecteur.
	///
	/// @param[in] const T& elem : L'élément à ajouter.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	void push_back(const T& elem)
	{
		if(!existe(elem))
			vec.push_back(elem);
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	void erase(const T& elem)
	///
	/// Retirer un élément du vecteur.
	///
	/// @param[in] const T& elem : L'élément à retirer.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	void erase(const T& elem)
	{
		auto pos = find(vec.begin(),vec.end(),elem);
		if(pos != vec.end())
		{
			vec.erase(pos);
		}
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	unsigned int size()
	///
	/// Accesseur à la taille du vecteur.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	unsigned int size() const
	{
		return (unsigned int)vec.size();
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	T& operator[](int i)
	///
	/// Opérateur [] pour accéder à un élément du vecteur.
	///
	/// @param[in] int i : L'index de l'élément.
	///
	/// @return T& : l'élément en question
	///
	////////////////////////////////////////////////////////////////////////
	T& operator[](int i)
	{
		return vec[i];
	}

	////////////////////////////////////////////////////////////////////////
	///
	/// @fn T& OnceVector<T>::get( int i )
	///
	/// methode pour accéder à un élément, pareil que l'operateur []
	///
	/// @param[in] int i : L'index de l'élément.
	///
	/// @return T& : l'élément en question
	///
	////////////////////////////////////////////////////////////////////////
	const T& get(int i) const
	{
		return vec[i];
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	void clear()
	///
	/// Vider le vecteur.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	void clear()
	{
		vec.clear();
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	void reserve(int i)
	///
	/// Appelle la méthode reserve() du vecteur.
	///
	/// @param[in] int i : L'index à réserver.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	void reserve(int i)
	{
		vec.reserve(i);
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	void resize(int i)
	///
	/// Redimensionner le vecteur.
	///
	/// @param[in] int i : La taille du redimensionnement.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	void resize(int i)
	{
		vec.resize(i);
	}

	/////////////////////////////////////////////////////////////////////////
	///
	/// @fn 	void insert(const T& elem)
	///
	/// Insérer un élément dans le vecteur.
	///
	/// @param[in] const T& elem : L'élément à insérer.
	///
	/// @return Aucune.
	///
	////////////////////////////////////////////////////////////////////////
	void insert(const T& elem)
	{
		push_back(elem);
	}

private:
	/// Le vecteur
	vector<T> vec;
};

///////////////////////////////////////////////////////////////////////////
/// @}
///////////////////////////////////////////////////////////////////////////






