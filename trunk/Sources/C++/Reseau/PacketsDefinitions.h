/// This file is autogenerated by BuildPacketsDefinitions.py
/// DO NOT MODIFY DIRECTLY

#pragma once

#include "Enum_Declarations.h"
#include <string>
#include "Vecteur.h"
#include <stdint.h>



class PacketReader;
class PacketBuilder;
enum PacketDataTypes
{
    PT_NONE=666,
    PT_PACKETDATABONUS,
    PT_PACKETDATAGAMEEVENT,
    PT_PACKETDATACHATMESSAGE,
    NB_PACKETDATATYPE,
};


class PacketDataBase{
public:
    virtual void ReceiveData(PacketReader& r) = 0;
    virtual void SendData(PacketBuilder& b) = 0;
    virtual PacketDataTypes GetType() = 0;
 };

class PacketDataBonus : public PacketDataBase
{
public:
    // Position du bonus
    Vecteur<float,3> mBonusPosition;

    //
    BonusType mBonusType;

    // Action a executer pour le bonus
    PaquetBonusAction mBonusAction;

    // Id de la game
    int mGameId, test2;

    void ReceiveData(PacketReader& r);
    void SendData(PacketBuilder& b);
    PacketDataTypes GetType(){ return PT_PACKETDATABONUS;}
};

class PacketDataGameEvent : public PacketDataBase
{
public:
    // GameId of the game you want to connect to
    int mGameId;

    // PlayerName1
    std::string mPlayer1Name;

    // PlayerName2
    std::string mPlayer2Name;

    // GameEvent
    GameEventCode mEvent;

    // If the event is specified on the left player
    bool mEventOnPlayerLeft;

    void ReceiveData(PacketReader& r);
    void SendData(PacketBuilder& b);
    PacketDataTypes GetType(){ return PT_PACKETDATAGAMEEVENT;}
};

class PacketDataChatMessage : public PacketDataBase
{
public:
    // Timestamp (should be the same as __int64)
    int64_t mTimestamp;

    // Message a envoyer
    std::string mMessage;

    // True means the target is a group, false means it's only one player
    bool mIsTargetGroup;

    // Or player name if mIsTragetGroup == false
    std::string mGroupName;

    // Mettre le nom du PC local pour eviter les loop infinies sur le network et eviter de recevoir ses propres messages
    std::string mOrigin;

    void ReceiveData(PacketReader& r);
    void SendData(PacketBuilder& b);
    PacketDataTypes GetType(){ return PT_PACKETDATACHATMESSAGE;}
};

PacketDataBase* CreatePacketData(PacketDataTypes t);
