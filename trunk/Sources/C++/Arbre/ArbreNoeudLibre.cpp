///////////////////////////////////////////////////////////////////////////
/// @file ArbreNoeudLibre.cpp
/// @author Michael Ferris
/// @date 2012-04-16
/// @version 1.0
///
/// @addtogroup razergame RazerGame
/// @{
///////////////////////////////////////////////////////////////////////////

#include "ArbreNoeudLibre.h"


////////////////////////////////////////////////////////////////////////
///
/// @fn void ArbreNoeudLibre::empty()
///
/// Vide le conteneur d'enfants, mais ne les libèrent pas
///
///
/// @return void
///
////////////////////////////////////////////////////////////////////////
void ArbreNoeudLibre::empty()
{
	while (!enfants_.empty()) {
		NoeudAbstrait* enfantAEffacer = enfants_.front();
		unlinkChild(enfantAEffacer);
	}
}

////////////////////////////////////////////////////////////////////////
///
/// @fn void ArbreNoeudLibre::erase( const NoeudAbstrait* noeud )
///
/// Efface le noeud du conteneur de noeud, le noeud n'est pas libéré
///
/// @param[in] const NoeudAbstrait * noeud
///
/// @return void
///
////////////////////////////////////////////////////////////////////////
bool ArbreNoeudLibre::erase( const NoeudAbstrait* noeud )
{
	unlinkChild(noeud);
    return false;
}

////////////////////////////////////////////////////////////////////////
///
/// @fn  ArbreNoeudLibre::ArbreNoeudLibre()
///
/// /*Description*/
///
///
/// @return 
///
////////////////////////////////////////////////////////////////////////
ArbreNoeudLibre::ArbreNoeudLibre():
    NoeudComposite(RAZER_KEY_ROOT_TREE)
{

}


///////////////////////////////////////////////////////////////////////////////
/// @}
///////////////////////////////////////////////////////////////////////////////


