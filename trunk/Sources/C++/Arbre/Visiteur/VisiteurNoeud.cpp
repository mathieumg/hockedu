//////////////////////////////////////////////////////////////////////////////
/// @file VisiteurNoeud.cpp
/// @author Michael Ferris, Vincent Lemire
/// @date 2012-01-27
/// @version 1.0 
///
/// @addtogroup inf2990 INF2990
/// @{
//////////////////////////////////////////////////////////////////////////////

#include "VisiteurNoeud.h"
#include "NoeudComposite.h"


////////////////////////////////////////////////////////////////////////
///
/// @fn VisiteurNoeud::VisiteurNoeud()
///
/// Constructeur par défaut
///
/// @param[in] void
///
/// @return 
///
////////////////////////////////////////////////////////////////////////
VisiteurNoeud::VisiteurNoeud(void)
{
}


////////////////////////////////////////////////////////////////////////
///
/// @fn VisiteurNoeud::~VisiteurNoeud()
///
/// Destructeur vide
///
/// @param[in] void
///
/// @return 
///
////////////////////////////////////////////////////////////////////////
VisiteurNoeud::~VisiteurNoeud(void)
{
}

////////////////////////////////////////////////////////////////////////
///
/// @fn void VisiteurNoeud::visiterNoeudComposite( NoeudComposite* noeud )
///
/// /*Description*/
///
/// @param[in] NoeudComposite * noeud
///
/// @return void
///
////////////////////////////////////////////////////////////////////////
void VisiteurNoeud::visiterNoeudComposite( NoeudComposite* noeud )
{
    visiterNoeudAbstrait(noeud);
    unsigned int nbrEnfant = noeud->obtenirNombreEnfants();
    for (unsigned int i=0; i<nbrEnfant; ++i)
    {
        noeud->chercher(i)->acceptVisitor(*this);
    }
}

///////////////////////////////////////////////////////////////////////////////
/// @}
///////////////////////////////////////////////////////////////////////////////
